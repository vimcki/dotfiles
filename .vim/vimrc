" Plugins ---------------------- {{{
set nocompatible              " be iMproved, required
call plug#begin('~/.vim/plugged')
" coc is language server client, comes with plugins that are language servers
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" vim-go plugin
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
" plugin for generating table tests in go
Plug 'buoto/gotests-vim'
" makes status line nice
Plug 'itchyny/lightline.vim'
" fzf
Plug 'junegunn/fzf', {'dir': '~/.fzf','do': './install --all'}
Plug 'junegunn/fzf.vim'
Plug 'antoinemadec/coc-fzf'
" apply visual selection to command, required by some macros, probably could
" do without it
Plug 'vim-scripts/vis'
" fugitive gives git commands in vim
Plug 'tpope/vim-fugitive'
" adds signs for git changed/added/deleted lines
Plug 'mhinz/vim-signify'
" nerd tree
Plug 'preservim/nerdtree'
" tag listing
Plug 'preservim/tagbar'
" allows spliting and joining lines of code
Plug 'AndrewRadev/splitjoin.vim'
" allows for quick access to commonly edited files
Plug 'vimcki/vim-quickfile'
call plug#end()
" }}}
" Basic settings ---------------------- {{{
" unmap space and make it leader
nnoremap <SPACE> <Nop>
let mapleader = " "

let maplocalleader = ","

" highlight as you type in search
set incsearch

" highlight previous match
set hlsearch

" turn on syntax highlighting
syntax on

" set utf-8
set encoding=utf-8

" Make tabs appear as 2 spaces
set ts=2 sts=0 sw=2 noexpandtab

" Switch between Vim window splits easily
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-H> <C-W>h
map <C-L> <C-W>l

" Hybrid line numbers
set relativenumber number

" Always show statusline
set laststatus=2

" Use 256 colours (Use this setting only if your terminal supports 256 colours)
set t_Co=256

" Make backspace behave in a more intuitive way
set backspace=indent,eol,start

" 'Q' in normal mode enters Ex mode. You almost never want this.
nmap Q <Nop>

" make vimdiff use vertical split insted of horizontal
set diffopt+=vertical

" don't use swap files
set noswapfile

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" set polish end english as spell check languages
set spelllang=en_us,pl
set spellfile=~/.vim/spell/it.utf-8.add

"  coc suggested settings ----------------------- {{{
 " " TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=100

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" }}}
" }}}
" Mapping common ---------------------- {{{
" open vimrc in new tab
nnoremap <leader>ev :tabnew<cr>:edit $MYVIMRC<cr>G
" source vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>

" movement
nnoremap H ^
nnoremap L $

" apperance
nnoremap <leader>n :setlocal relativenumber! number!<cr>:call ToggleSignColumn()<cr>

" misc
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>
nnoremap <leader>wq :wq<cr>
nnoremap <leader>Q :q!<cr>

" paste from last yank
nnoremap <leader>p o<c-r>0<esc>ddk$
nnoremap <leader>P ko<c-r>0<esc>ddk$

" exit insert mode with quick combo
" inoremap <esc> <nop>
inoremap jk <esc>

" highlight trailing whitespaces
" this mapping is probably redundant since linters/static code analysis will pick it up
" done for practice
nnoremap <leader>- :match Error /\v\s+$/<cr>
nnoremap <leader>_ :match none <cr>

" stop highlighting last search
nnoremap <leader>' :nohlsearch <cr>

" when searching use very magic mode
nnoremap / /\v

" go to next entry in quickfix panel
nnoremap <leader>j :cnext<cr>
" go to previous entry in quickfix panel
nnoremap <leader>k :cprevious<cr>

" toggle buffer list
nnoremap <leader>tl :ls<cr>

" toggle spell check
nnoremap <leader>ts :set spell!<cr>

" expand json
nnoremap <F2> i<CR><ESC>v%:B !python -m json.tool<CR>
" generate ctags
nnoremap <F12> :!ctags -R --fields=+l --languages=python --python-kinds=-iv -f ./tags $(python -c "import os, sys; print(' '.join('{}'.format(d) for d in sys.path if os.path.isdir(d)))") ./<CR><CR>
" }}}
" Common abbreviations ---------------------- {{{
" example of abbreviation, adn -> and when you in
iabbrev adn and

" short form return
iabbrev ret return
iabbrev return NOPENOPENOPE
" }}}
" Operators ---------------------- {{{
" in next()
onoremap in( :<c-u>execute "normal! /(\r:nohlsearch\rvi("<cr>
" in last ()
onoremap il( :<c-u>execute "normal! ?(\r:nohlsearch\rvi("<cr>
" in next "asdf"
onoremap in" :<c-u>execute "normal! /\"\r:nohlsearch\rvi\""<cr>
" in next ""
onoremap il" :<c-u>execute "normal! ?\"\r:nohlsearch\rvi\""<cr>
" in next {}
onoremap in{ :<c-u>execute "normal! /{\r:nohlsearch\rvi{"<cr>
" in next {}
onoremap il{ :<c-u>execute "normal! ?{\r:nohlsearch\rvi{"<cr>
" }}}
" Vimscript file settings ---------------------- {{{
augroup vim_settings
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
		" fold everything on start
    autocmd FileType vim setlocal foldlevelstart=0
		" comment line
	  autocmd FileType vim nnoremap <buffer> <localleader>c I" <esc>
augroup END
" }}}
" Go file settings ---------------------- {{{
augroup go_settings
	autocmd!
	autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
augroup END
augroup go_mappings
	autocmd!
	" comment current line
	autocmd FileType go nnoremap <buffer> <localleader>c I// <esc>
	" make comment for exported function/type
	autocmd FileType go nnoremap <buffer> <localleader>f ?\v(^func (\([a-zA-Z0-9* ]+\) \|)\|^type )?e<cr>:nohlsearch<cr>wyiwO// <esc>pA 
	" comment everything to the end of file, useful when fixing tests one at a
	" time, i should investigate option to run test under cursor
	autocmd FileType go nnoremap <buffer> <localleader>e 0<c-v>GI//<esc> 
	" copy test case, assumes every test case starts with name: parameter
	autocmd FileType go nnoremap <buffer> <localleader>t ?{\n\t\+name:<cr>y%%pi,<cr><esc>:nohlsearch<cr>zz
	" expand if
	autocmd FileType go :iabbrev <buffer> iff	if {<cr>}<up><right>
	" expand struct
	autocmd FileType go :iabbrev <buffer> structt type struct{<cr>}<up><right><right><right>
	" expand interface
	autocmd FileType go :iabbrev <buffer> interfacee type interface{<cr>}<up><right><right><right>
	" expand range in if
	autocmd FileType go :iabbrev <buffer> rng := range
	" expand if error
	autocmd FileType go :iabbrev <buffer> iferr if err != nil	{<cr><cr>}<up>
augroup END
" }}}
" Python file settings ---------------------- {{{
augroup python_settings
	autocmd!
	autocmd BufNewFile,BufRead *.py
		\ set tabstop=4 |
		\ set softtabstop=4 |
		\ set shiftwidth=4 |
		\ set textwidth=100 |
		\ set expandtab |
		\ set autoindent |
		\ set fileformat=unix |
augroup END
augroup python_mappings
	autocmd!
	" comment current line
	autocmd FileType python nnoremap <buffer> <localleader>c I# <esc>
	" expand if
	autocmd FileType python :iabbrev <buffer> iff if:<left>
    " import standard library under cursor TODO fix for no import file
	autocmd FileType python nnoremap <buffer> <localleader>i yiwgg/\v^import .+$\n\n/e<cr>:nohlsearch<cr>Oimport <esc>p<c-o><c-o>
	" TODO expand imports in python to 3 per line
augroup END
" }}}
" Bash file settings ---------------------- {{{
augroup bash_settings
	autocmd!
	" comment current line
	autocmd FileType sh nnoremap <buffer> <localleader>c I# <esc>
augroup END
" }}}
" Makefile file settings ---------------------- {{{
augroup make_mappings
	autocmd!
	" comment current line
	autocmd FileType make nnoremap <buffer> <localleader>c I# <esc>
augroup END
" }}}
" Javascript file settings ---------------------- {{{
augroup javascipt_settings
	autocmd!
	autocmd BufNewFile,BufRead *.js,*.html,*.css
		\ set tabstop=2 |
		\ set softtabstop=2 |
		\ set shiftwidth=2 |
augroup END

augroup javascipt_mappings
	autocmd!
	" comment current line
	autocmd FileType javascript nnoremap <buffer> <localleader>c I// <esc>
augroup END
" }}}
" HTML file settings ---------------------- {{{
augroup html_settings
	autocmd!
	autocmd BufNewFile,BufRead *.html
		\ set tabstop=2 |
		\ set softtabstop=2 |
		\ set shiftwidth=2 |
augroup END
" }}}
" CSS file settings ---------------------- {{{
augroup css_settings
	autocmd!
	autocmd BufNewFile,BufRead *.css
		\ set tabstop=2 |
		\ set softtabstop=2 |
		\ set shiftwidth=2 |
augroup END
" }}}
" lightline plugin setting ---------------------- {{{
" lightline show path
let g:lightline = {
      \ 'component_function': {
      \   'filename': 'LightLineFilename'
      \ }
      \ }
function! LightLineFilename()
	return expand('%')
endfunction
" }}}
" coc plugin setting ---------------------- {{{
if isdirectory($HOME . "/.vim/plugged/coc.nvim")
    call coc#add_extension(
					\'coc-go',
					\'coc-json',
				 	\'coc-sh',
	 				\'coc-yaml',
	 				\'coc-python',
	 				\'coc-vimlsp',
	 				\'coc-markdownlint',
	  \)
endif
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-@> coc#refresh()

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `<leader>lj` and `<leader>lk` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> <leader>lk <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>lj <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> <c-g> <Plug>(coc-definition)
nmap <silent> <leader>ly <Plug>(coc-type-definition)
nmap <silent> <leader>li <Plug>(coc-implementation)
nmap <silent> <leader>lr <Plug>(coc-references)

" Symbol renaming.
nmap <leader>ln <Plug>(coc-rename)

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" coc-go setting ---------------------- {{{
augroup go_coc_mappings
	autocmd!
	" comment current line
	" TODO Make plugin func out of this
	" autocmd FileType go nnoremap <buffer> <c-a> ?\v^func( \(\a+ \*\a+\)){0,1} (\a+)\(?e<cr>byiw:CocCommand go.test.toggle<cr>/^func Test(\a+){0,1}_<c-r>0<cr>zt:nohlsearch<cr>
	autocmd FileType go nnoremap <buffer> <c-a> :CocCommand go.test.toggle<cr>
augroup END

autocmd BufWritePre *.go :silent call CocAction('runCommand', 'editor.action.organizeImport')
" }}}
" }}}
" vim-go plugin setting ---------------------- {{{
" set highlighting, not sure if this is purely vim-go or if coc uses this too
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
augroup vim_go_mappings
	autocmd!
	" comment current line
	autocmd FileType go nnoremap <buffer> <localleader>r :GoTestFunc<cr>
augroup END
" }}}
" fzf setting ---------------------- {{{
nnoremap <c-p> :Files<CR>
nnoremap <tab> :Rg<CR>
nnoremap <leader>u :Tags<CR>
nnoremap <leader>/ :BLines<CR>
nnoremap <leader>tm :Maps<CR>
" }}}
" fugitive setting ---------------------- {{{
nnoremap <leader>gst :Git status<cr>
nnoremap <leader>gsi :Gstatus<cr>
nnoremap <leader>gaa :Git add --all<cr>
nnoremap <leader>gac :Git add %<cr>
nnoremap <leader>gc :Git commit<cr>
nnoremap <leader>gp :Git push<cr>
nnoremap <leader>gl :Git pull<cr>
nnoremap <leader>go :Git checkout
nnoremap <leader>gn :Git checkout @{-1}<cr><esc>oO
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gm :Git mergetool<cr>

"toggle git blame
nnoremap <leader>tb :Gblame<cr>
" }}}
" lightline setting ---------------------- {{{
let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly', 'filename', 'modified', 'cocstatus' ] ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'FugitiveHead',
	\   'cocstatus': 'coc#status'
    \ },
    \ }

  " Use auocmd to force lightline update.
  autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()

" }}}
" nerd tree setting ---------------------- {{{
" toggle nerd tree
nnoremap <leader>tn :NERDTreeToggle<CR>
" }}}
" tagbar settings ---------------------- {{{
" toggle tagbar
nnoremap <leader>tt :TagbarToggle<CR>
" }}}
" signify settings ---------------------- {{{
nnoremap <leader>hu :SignifyHunkUndo<cr>
nnoremap <leader>hd :SignifyHunkDiff<cr>

" hunk jumping
nmap <leader>hj <plug>(signify-next-hunk)
nmap <leader>hk <plug>(signify-prev-hunk)

" hunk text object
omap ih <plug>(signify-motion-inner-pending)
xmap ih <plug>(signify-motion-inner-visual)
omap ah <plug>(signify-motion-outer-pending)
xmap ah <plug>(signify-motion-outer-visual)
" }}}
" vim-quickfile settings ---------------------- {{{
nnoremap <leader>fm :call QuickFile("makefile")<cr>
nnoremap <leader>fi :call QuickFile("ci")<cr>
nnoremap <leader>fc :call QuickFile("config")<cr>
nnoremap <leader>fb :call QuickFile("build")<cr>
nnoremap <leader>fo :call QuickFile("models")<cr>
nnoremap <leader>ft :call QuickFile("test")<cr>
nnoremap <leader>fr :call QuickFile("readme")<cr>
nnoremap <leader>fe :call QuickFile("main")<cr>
nnoremap <leader>fd :call QuickFile("dependencies")<cr>
" }}}
